#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('edaa_gib:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 *
 * SOCKET IO
 *
 * */

let io = require('socket.io')(server);

io.on('connection', function(client) {
  console.log('Client connected...');

  client.on('join', function(data) {
    console.log('CLIENT JOINED');

    // console.log(client.request.session);
    // client.emit('messages', 'Hello from server');
  });
  client.on('send', function (data) {
    // let reqBody = JSON.stringify({body: 'New V3 test!!'});
    // console.log(reqBody);
    // return new Promise(function (resolve, reject) {
    //   let options = {
    //     method: 'POST',
    //     uri: `https://api.github.com/repos/ark9606/unicorn_trip/issues/1/comments`,
    //     // uri: `https://api.github.com/repos/facebook/react/issues/1/comments`,
    //     headers: {
    //       'user-agent': 'node.js',
    //       'Authorization' : `token ${access_token}`
    //     },
    //     body: reqBody
    //   };
    //   request(options, function (err, res, body) {
    //     if(err) reject(err);
    //     resolve(body);
    //   });
    //
    // })

    // console.log(client.sobaka);
    io./*sockets.*/emit('messages',{message: data.message});
    // client.broadcast.emit('messages', {message: data.message});
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
